/**
 * Problem:
 * Given an array of distinct elements which was initially sorted in ascending order,
 * and then rotated at some unknown point.
 * The task is to find the minimum element in the given sorted and rotated array.
 *
 * Examples:
 *
 * Input:
 * N = 10
 * arr = {2, 3, 4, 5, 6, 7, 8, 9, 10, 1}
 * Output: 1
 * Explanation: The array is rotated once. Minimum element is 1 at index 9.
 *
 * Input:
 * N = 5
 * arr = {3, 4, 5, 1, 2}
 * Output: 1
 * Explanation: The array is rotated. Minimum element is 1 at index 3.
 *
 * Approach:
 * Use binary search to find the pivot point where the rotation occurred.
 * The minimum element is the only one smaller than both of its neighbors.
 * Time Complexity: O(log N)
 * Space Complexity: O(1)
 */


class Solution {
    // Function to find the minimum element in sorted and rotated array.
    static int minNumber(int arr[], int low, int high) {
        // Your code here
        low=0;
        high=arr.length-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(arr[low]<arr[high]){
                return arr[low];
            }
            int next=(mid+1)%arr.length;
            int prev=(mid-1+arr.length)%arr.length;
            
            if(arr[mid]<arr[next]&& arr[mid]<arr[prev]){
                return arr[mid];
            }
            if(arr[mid]>=arr[low]){
                low=mid+1;
                
            }
            else high=mid-1;
        }
        return arr[0];
        
        
    }
}