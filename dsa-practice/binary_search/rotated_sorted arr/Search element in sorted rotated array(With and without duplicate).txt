/*
    üîç Question:
    You are given a sorted array that has been rotated at some unknown pivot.
    Write a function to search for a given key in this rotated sorted array.

    ‚û§ The array contains **distinct** integers.
    ‚û§ If the key is found, return true. Otherwise, return false.

    Example 1:
    Input: arr = [4, 5, 6, 7, 0, 1, 2], key = 0
    Output: true

    Example 2:
    Input: arr = [4, 5, 6, 7, 0, 1, 2], key = 3
    Output: false

    Constraints:
    ‚Ä¢ Time complexity should be O(log n)
    ‚Ä¢ Array has no duplicate elements
*/

class Solution {
    public boolean search(int[] arr, int key) {
        int low = 0;                          // Start pointer
        int high = arr.length - 1;           // End pointer

        // Loop until the search space is valid
        while (low <= high) {
            int mid = low + (high - low) / 2; // Midpoint

            if (arr[mid] == key) {
                return true; // Found the key
            }

            // Left half is sorted
            if (arr[low] <= arr[mid]) {
                // Check if key lies within the sorted left half
                if (arr[low] <= key && key <= arr[mid]) {
                    high = mid - 1; // Search in left half
                } else {
                    low = mid + 1;  // Search in right half
                }
            }

            // Right half is sorted
            else {
                // Check if key lies within the sorted right half
                if (arr[mid] <= key && key <= arr[high]) {
                    low = mid + 1; // Search in right half
                } else {
                    high = mid - 1; // Search in left half
                }
            }
        }

        return false; // If not found
    }
}
