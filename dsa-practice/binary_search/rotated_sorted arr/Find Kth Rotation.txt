th Rotation
Difficulty: EasyAccuracy: 23.16%Submissions: 300K+Points: 2Average Time: 20m

Given an increasing sorted rotated array arr[] of distinct integers. The array is right-rotated k times. Find the value of k.
Let's suppose we have an array arr[] = [2, 4, 6, 9], if we rotate it by 2 times it will look like this:
After 1st Rotation : [9, 2, 4, 6]
After 2nd Rotation : [6, 9, 2, 4]

Examples:

Input: arr[] = [5, 1, 2, 3, 4]
Output: 1
Explanation: The given array is [5, 1, 2, 3, 4]. The original sorted array is [1, 2, 3, 4, 5]. We can see that the array was rotated 1 times to the right.

Input: arr = [1, 2, 3, 4, 5]
Output: 0
Explanation: The given array is not rotated.

class Solution {
    public int findKRotation(int arr[]) {
        int low = 0;
        int high = arr.length - 1;

        while (low <= high) {
            // Subarray is already sorted
            if (arr[low] <= arr[high]) {
                return low;
            }

            int mid = low + (high - low) / 2;
            int next = (mid + 1) % arr.length;
            int prev = (mid - 1 + arr.length) % arr.length;

            // Found minimum element
            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {
                return mid;
            }

            // Left half is sorted → min must be in right half
            if (arr[low] <= arr[mid]) {
                low = mid + 1;
            } else {
                // Right half is sorted → min must be in left half
                high = mid - 1;
            }
        }

        return 0;
    }
}
