class Solution {
    public int myAtoi(String s) {
        // Step 1: Handle empty/null string
        // ðŸ‘‰ If the input is null or just empty, thereâ€™s no number to convert.
        // So we directly return 0.
        if (s == null || s.length() == 0) return 0;

        int i = 0, n = s.length();
        long result = 0; // ðŸ‘‰ Store the number we build. Using long so we can detect overflow.
        int sign = 1;    // ðŸ‘‰ Assume the number is positive unless we see a '-'.

        // Step 2: Skip leading spaces
        // ðŸ‘‰ Move the pointer forward until we reach the first non-space character.
        while (i < n && s.charAt(i) == ' ') {
            i++;
        }

        // Step 3: Check for sign
        // ðŸ‘‰ If the first non-space character is '+' or '-', set the sign.
        // If '-', mark number as negative. Then move to next character.
        if (i < n && (s.charAt(i) == '+' || s.charAt(i) == '-')) {
            if (s.charAt(i) == '-') sign = -1;
            i++;
        }

        // Step 4: Read digits
        // ðŸ‘‰ Keep reading digits one by one until we hit a non-digit or end of string.
        // Each digit is added to result like: result = result*10 + digit.
        while (i < n && Character.isDigit(s.charAt(i))) {
            int digit = s.charAt(i) - '0';
            result = result * 10 + digit;

            // Step 5: Check overflow
            // ðŸ‘‰ If result goes beyond max integer (2147483647) or min integer (-2147483648),
            // return those limits immediately.
            if (sign == 1 && result > Integer.MAX_VALUE) {
                return Integer.MAX_VALUE;
            }
            if (sign == -1 && -result < Integer.MIN_VALUE) {
                return Integer.MIN_VALUE;
            }

            i++;
        }

        // Step 6: Return result with sign
        // ðŸ‘‰ Multiply the final number with its sign (+ or -), then return it.
        return (int)(result * sign);
    }
}
